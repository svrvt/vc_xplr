#!/bin/bash

# Проверяем, был ли предоставлен входной аргумент
if [ "$#" -lt 1 ]; then
	echo "Использование: $0 [-a] [-u] [-s] [--fzf] [--rofi] [--dmenu] имя_файла"
	exit 1
fi

# Обрабатываем опции командной строки
all=false
user_dir=false
silent=false
menu=""
menu_command=""
# while getopts ":ausf:r:d:" opt; do
# case ${opt} in
for i in "$@"; do
	if [[ "$i" = -* ]]; then
		arg="${i//-/}"
		# echo -e "$arg"
		case $arg in
		a)
			all=true
			user_dir=true
			;;
		u)
			user_dir=true
			;;
		s)
			silent=true
			;;
		f)
			menu="fzf"
			menu_command="fzf -m --height=20"
			;;
		r)
			menu="rofi"
			menu_command="rofi -multi-select -dmenu -i -p 'Выберите приложение:'"
			;;
		d)
			menu="dmenu"
			menu_command="dmenu"
			;;
		\?)
			echo "Неверная опция: -$OPTARG" 1>&2
			exit 1
			;;
		esac
	elif [[ "$i" != -* ]]; then
		objects+=("$(realpath "${i}")")
		# echo -e "${objects[@]}"
	fi
done
# shift $((OPTIND - 1))

if [ "${#objects[@]}" -gt 1 ]; then
	count=0
	while [ "$count" -lt "${#objects[@]}" ]; do
		check_next=$(mimetype -bL "${objects[$count]}")
		case $check_next in
		"$check_next")
			subcount=0
			while [ "$subcount" -le "${#sets_type[@]}" ]; do
				if [ "${sets_type[$subcount]}" = "$check_next" ]; then
					# echo "! $count $subcount ${#sets_type[@]} ${sets_type[$subcount]} = $check_next"
					break
				elif [ "$subcount" = "${#sets_type[@]}" ]; then
					# echo "!! $count $subcount = ${#sets_type[@]} ${sets_type[*]} + $check_next"
					sets_type+=("$check_next")
				else
					# echo "!!! $count $subcount < ${#sets_type[@]} ${sets_type[$subcount]} - $check_next"
					subcount="$(("$subcount" + 1))"
				fi
			done
			count="$(("$count" + 1))"
			;;
		esac
	done
	# echo -e "${#sets_type[@]}" "${sets_type[@]}"
	count=0
	declare -A array
	while [ "$count" -lt "${#sets_type[@]}" ]; do
		type=${sets_type[$count]}
		case $type in
		"$type")
			subcount=0
			while [ "$subcount" -le "${#objects[@]}" ]; do
				object_type=$(mimetype -bL "${objects[$subcount]}")
				# echo -e "$count $subcount ${objects[$subcount]} ${object_type}"
				if [ "$type" = "$object_type" ]; then
					array+=([${objects[$subcount]}]=${type})
				fi
				subcount="$(("$subcount" + 1))"
			done
			count="$(("$count" + 1))"
			;;
		esac
	done
fi

# Ищем соответствующие приложения в ~/.config/mimeapps.list
search_app_f() {
	while IFS= read -r line; do
		apps+=("$line")
	done < <(grep "$file_type" "$HOME"/.config/mimeapps.list | cut -d '=' -f 2 | tr ';' '\n' | sed '/^$/d' | xargs -n 1 basename)
	# Если список приложений пуст или задана опция -u, ищем в ~/.local/share/applications/
	if [ ${#apps[@]} -eq 0 ] || [ "$user_dir" = true ]; then
		while IFS= read -r line; do
			new_apps+=("$line")
		done < <(grep "$file_type" "$HOME"/.local/share/applications/*.desktop | cut -d ':' -f 1 | xargs -n 1 basename)
		if [ ${#new_apps[@]} -ne 0 ]; then
			apps=("${apps[@]}" "${new_apps[@]}")
		fi
	fi
	# Если список приложений все еще пуст или задана опция -a, ищем в /usr/share/applications/ и пополняем список
	if [ ${#apps[@]} -eq 0 ] || [ "$all" = true ]; then
		while IFS= read -r line; do
			new_apps+=("$line")
		done < <(grep "$file_type" /usr/share/applications/*.desktop | cut -d ':' -f 1 | xargs -n 1 basename)
		if [ ${#new_apps[@]} -ne 0 ]; then
			apps=("${apps[@]}" "${new_apps[@]}")
		fi
	fi
	# Если список приложений все еще пуст, выводим сообщение об ошибке и выходим
	if [ ${#apps[@]} -eq 0 ]; then
		echo "Не найдено приложений, способных обработать файл $1" 1>&2
		exit 1
	fi
}

define_app_f() {
	# Если задана опция -a или -u и есть более одного приложения, передаем список приложений
	# if [ "$all" = true ] || [ "$user_dir" = true ] || [ ${#apps[@]} -gt 1 ]; then
	if [ ${#apps[@]} -gt 1 ]; then
		if [ "$silent" = true ]; then
			app=${apps[0]}
		else
			if [ -n "$menu" ] && command -v $menu >/dev/null; then
				# app=$(printf '%s\n' "${apps[@]}" | eval "$menu_command")
				while IFS= read -r line; do
					app_set+=("$line")
				done < <(printf '%s\n' "${apps[@]}" | eval "$menu_command")
				# app=${app_set[0]}
			else
				echo "Выберите приложение из списка:"
				select app in "${apps[@]}"; do
					break
				done
			fi
		fi
	else
		app=${apps[0]}
	fi
}

open_app_f() {
	# Открываем что-либо($@) в выбранном приложении($app) при помощи программы(должна находиться в $PATH)
	if [ ${#app_set[@]} -ge 1 ]; then
		for app in "${app_set[@]}"; do
			run-desktop "$app" "${objects[@]}" >/dev/null 2>&1 &
		done
	else
		run-desktop "$app" "${objects[@]}" >/dev/null 2>&1 &
	fi
}

set_app_f() {
	# Если задана опция -s, пропускаем диалог о добавлении или изменении приложения
	if [ "$silent" = false ]; then
		# Проверяем, установлен ли handlr или xdg-utils
		if command -v handlr >/dev/null; then
			handler="handlr"
			handler_command="set $file_type $app"
		elif command -v xdg-mime >/dev/null; then
			handler="xdg-mime"
			handler_command="default $app $file_type"
		else
			echo "Не установлены handlr или xdg-utils" 1>&2
			exit 1
		fi
		# Если приложение не найдено в ~/.config/mimeapps.list или было выбрано другое приложение, начинаем диалог
		if ! grep -q "$app" ~/.config/mimeapps.list || [ "$app" != "${apps[0]}" ]; then
			if [ -n "$menu" ] && command -v $menu >/dev/null; then
				yn=$(echo -e "y\nn" | eval $menu_command)
			else
				read -p "Хотите добавить или изменить $app в ~/.config/mimeapps.list для $file_type? (y/n) " yn
			fi
			case $yn in
			[Yy]*) $handler $handler_command ;;
			*) echo "Пропускаем добавление или изменение приложения" ;;
			esac
		fi
	fi
}

obj_l=("${!array[@]}")
typ_l=("${array[@]}")

if [ "${#sets_type[@]}" -gt 1 ]; then
	for ft in "${sets_type[@]}"; do
		file_type=$ft
		object_for_type=()
		objects=()
		apps=()
		new_apps=()
		app_set=()
		cnt=0
		while [ "$cnt" -lt "${#array[@]}" ]; do
			# echo -e "${#array[@]} ${typ_l[$cnt]} : ${obj_l[$cnt]}"
			if [ "$file_type" = "${typ_l[$cnt]}" ]; then
				object_for_type+=("${obj_l[$cnt]}")
				cnt="$(("$cnt" + 1))"
			else
				cnt="$(("$cnt" + 1))"
			fi
		done
		objects=("${object_for_type[@]}")
		search_app_f "$file_type"
		define_app_f
		open_app_f
		# set_app_f
	done
else
	file_type=$(mimetype -bL "${objects[0]}")
	search_app_f
	define_app_f
	open_app_f
	set_app_f
fi
